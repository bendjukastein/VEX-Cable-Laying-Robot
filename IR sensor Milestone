#pragma config(Sensor, in1,    IR_FAR_1,       sensorReflection)
#pragma config(Sensor, in3,    IR_FAR_2,       sensorReflection)
#pragma config(Sensor, dgtl1,  button1,        sensorTouch)
#pragma config(Sensor, dgtl2,  button2,        sensorTouch)
#pragma config(Sensor, dgtl3,  motor1_quad,    sensorQuadEncoder)
#pragma config(Sensor, dgtl9,  LED,            sensorLEDtoVCC)
#pragma config(Sensor, dgtl11, sonar,          sensorSONAR_cm)
#pragma config(Motor,  port1,           motor3,        tmotorNone, openLoop)
#pragma config(Motor,  port2,           motor2,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           motor1,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,            ,             tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
Tasks:

a)Turn  your  robot  towards  the  target  object.	This  function  should  operate  properly when your robot is within 1 metre of the target.
b) Signals when your robot is properly facing the target object for approach but is  too  far  away  for  cable  connection.  This  function  should  be  able  to  function  properly when your robot is within 1 metre of the target.
 c) Signals  when  your  robot  is  at  the  proper  distance  and  orientation  for  cable  connection.
d) Signals when your robot has made contact with a wall when turning or moving  straight.

A completed in exercise 3
B in exercise 1
C in exercise 2
D in exercise 4

*/

/*
Name: Ben Djukastein,Brynna Clarke, Ethan Macmillan
*Note* Some code created by Dr. Mcguire, and used with his permission (e.g. monitorlightleft() and monitorlightright() were based off a function he wrote called monitorlight())
Group: kit 139
Lab Section:B09
Date: Mar 5th 2019
*/

//motor1 is right side.
//motor2 is left side
//motor 3 is activation mechanism
//IR_FAR_1 is left side IR sensor
//IR FAR_2 is right

//*********************WHEN YOU FINISH EACH EXERCISE, INCREMENT THIS VALUE***************************************
#define EXERCISE_NUMBER 	3


//Global Variables

bool button1_pushed; //flag to store button1 input
bool button2_pushed; //flag to store button2 input
const   int OFF = 0;// integer used to turn off the LEDs
const   int ON  = 1;//integer used to turn on the LEDs
int Motor_Speed = 50;//Controls strength of motor.
int adjustment_time = 0;//Controls strength of motor.
CONNECTION_DISTANCE = 3; //Maximum distance (cm) that the robot can be from the beacon when connecting the cable
LOW_IR = 300; // minimum IR reading to be considered “facing the IR beacon”.
MEDIUM IR = 1500; // minimum IR to be considered near the beacon

int monitorlightleft()
{
	static int minLevelIR1 = 2800;	// Minimum light level seen by IR sensor 1(InfraCollector)
	static int maxLevelIR1 = 0;			// Maximum light level seen by IR sensor 1
	static int diffLevelIR1 = 0;		// Difference between maximum and minimum seen in last 0.1 seconds

	int lightLevel1 = SensorValue[IR_FAR_1];

	// Check when 100 msecs elapse.
	if ( time1[T1] > 150 )  {

		// 100 msecs have elapsed.  Computing delta of light level.
		diffLevelIR1 = maxLevelIR1 - minLevelIR1;

		// Reset calculation for next 100 msecs.
		maxLevelIR1 = 0;
		minLevelIR1 = 2800;
		clearTimer(T1);

		} else {

		// Check for new minimum/maximum light levels.
		if ( lightLevel1 < minLevelIR1 ) {
			minLevelIR1 = lightLevel1;
			} else if ( lightLevel1 > maxLevelIR1 ) {
			maxLevelIR1 = lightLevel1;
		}
	}

	return(diffLevelIR1);
}



int monitorlightright()
{// this function monitors the intensity of IR light from the right-hand beacon.
	static int minLevelIR2 = 2800;// Minimum light level seen by IR sensor 1(InfraCollector)
	static int maxLevelIR2 = 0;			// Maximum light level seen by IR sensor 1
	static int diffLevelIR2 = 0;		// Difference between maximum and minimum seen in last 0.1 seconds

	int lightLevel2 = SensorValue[IR_FAR_2];

	// Check when 100 msecs elapse.
	if ( time1[T4] > 100 )  {

		// 100 msecs have elapsed.  Computing delta of light level.
		diffLevelIR2 = maxLevelIR2 - minLevelIR2;

		// Reset calculation for next 100 msecs.
		maxLevelIR2 = 0;
		minLevelIR2 = 2800;
		clearTimer(T4);

		} else {

		// Check for new minimum/maximum light levels.
		if ( lightLevel2 < minLevelIR2 ) {
			minLevelIR2 = lightLevel2;
			} else if ( lightLevel2 > maxLevelIR2 ) {
			maxLevelIR2 = lightLevel2;
		}
	}

	return(diffLevelIR2);
}









void monitorInput()
{
	if(SensorValue(button1) && !button1_pushed)
	{
    	button1_pushed = true;
	}

	if(SensorValue(button2) && !button2_pushed)
	{
    	button2_pushed = true;
	}
}


//Exercise 1 should be: detecting if the robot is facing the beacon, but is too far away too connect

void exercise_1()
{
    // Define tag for enumerated type for exercise 1
	enum T_exercise1_state {
    	NOT_READY_CONNECT = 0,
    	READY_CONNECT,
	};

	T_exercise1_state exercise1_state = NOT_READY_CONNECT;

	while(true)
	{
    	// Switch the states.
    	switch(exercise1_state) {


    	case NOT_READY_CONNECT:
    	SensorValue(LED) = OFF;


     	if (SensorValue[IR_FAR_1] <= LOW_IR && SensorValue[IR_FAR_2] <= LOW_IR && SensorValue[sonar] <= CONNECTION_DISTANCE) {
            	// If IR reading is below certain value, then robot is facing the beacon. Change to the READY_CONNECT state.
        	//Also only function if the sonar is less than 3cm away.
            	exercise1_state = READY_CONNECT;
        	}
   			 break;

   			 case READY_CONNECT:
   			 SensorValue(LED)= ON;
   			 if(/*SensorValue[IR_FAR_1] >= MEDIUM_IR  || SensorValue[IR_FAR_2] >= MEDIUM_IR  || */SensorValue[sonar] >= CONNECTION_DISTANCE){
   				 // if the robot is not facing the beacon, or is too far away, do not signal that the robot is ready to begin the connect the cable.
   		 exercise1_state = NOT_READY_CONNECT;
  	}
   			 break;
  	}
	}

}




//Exercise 2 should be: Turning on an LED if the robot is facing the beacon and is further than 10cm away (aka signalling ready to begin ADVANCING)
void exercise_2()
{
	// Define tag for enumerated type for exercise 2
	enum T_exercise2_state {
    	TOO_CLOSE_OR_WRONG_WAY = 0,
    	CORRECT_DIRECTION,
	};

	// Declare variable to hold state, intialize to MOTOR_STOP state.
	T_exercise2_state exercise2_state = TOO_CLOSE_OR_WRONG_WAY;



	while(true)
	{
    	// Switch the states.
    	switch(exercise2_state) {

        	// Code for MOTOR_STOP state:
case TOO_CLOSE_OR_WRONG_WAY:

   			 SensorValue(LED)= OFF;
        	// Turn LED off.

        	if (SensorValue[IR_FAR_1] <= MEDIUM_IR && SensorValue[IR_FAR_2] <= MEDIUM_IR && SensorValue[sonar] >= CONNECTION_DISTANCE+1) {
            	// If IR reading is below certain value, then robot is facing the beacon. Change to the CORRECT_DIRECTION state.
        	//Also only function if the sonar is more than 4cm away.
            	exercise2_state = CORRECT_DIRECTION;
        	}
        	break;

case CORRECT_DIRECTION:
        	// Turn LED on.
    	SensorValue(LED)= ON;
    	if(/*SensorValue[IR_FAR_1] >= MEDIUM_IR || SensorValue[IR_FAR_2] >= MEDIUM_IR ||*/ SensorValue[sonar] <= CONNECTION_DISTANCE){
   		 //if any of the above conditions fail (with some IR buffer room), turn off the LED, as the robot is either too close or not facing the beacon.
   		 exercise2_state = TOO_CLOSE_OR_WRONG_WAY;
  	}

        	break;

    	default:
    	}//

	}//end while
}//exercise 











//Exercise 3 should be: Turning the robot to face the beacon.(aka SEARCHING)

void exercise_3()
{
    // Define tag for enumerated type for exercise 1
	enum T_exercise3_state {
    	MOTOR_STOP = 0,
    	SEARCHING,
    	ADJUSTING_LEFT,
    	CORRECTING,
    	ADVANCING,
    	CORRECT_LOCATION,
	};



	T_exercise3_state exercise3_state = MOTOR_STOP;

	while(true)
	{
    	// Switch the states.
    	switch(exercise3_state) {


case MOTOR_STOP:
monitorInput();
    	// Turn motors off.
        	motor[motor1] = OFF;
        	motor[motor2] = OFF;
        	SensorValue(LED)= OFF;
        	if ( button1_pushed ) {
            	// If button1 pushed, change to the MOTOR_RUNNING state.
            	exercise3_state = SEARCHING;
            	// Clear flag to indicate button 1 processed.
            	button1_pushed = false;
        	}//if
   			 break;



case SEARCHING:

   			// SensorValue[motor1_quad] = OFF;
        	//refresh the quadrature sensor to 0

        	//turn robot in a 360, and stop when facing beacon, or after 8 seconds.
            	clearTimer(T2);

							//while(time1[T2] < 15000){
//this was an arbitrary time just so while testing it wouldn’t spin forever if it didn’t pick up IR

            	motor[motor1] = (-1 * Motor_Speed);
            	motor[motor2] = Motor_Speed;
            	
            	if (monitorlightright() >= MEDIUM_IR){
            	//this value represents the difference between ambient light and the blinking IR, returns a value every .1 seconds	
                	//   if condition is met, robot should begin ADVANCING;   since the IR coming in from one side of the front is different than the other.      
                                                                                
                	clearTimer(T3);
            	exercise3_state = ADJUSTING_LEFT;// or maybe CORRECT_LOCATION;
            	}//if
        	break;

case ADJUSTING_LEFT:
							
							
if(monitorlightleft() >= MEDIUM_IR*(2/3)){ 
//Play with 1000 value for range. Lower for far range, higher for close range. 
								adjustment_time = time1(T3);
								clearTimer(T2);
								exercise3_state = CORRECTING;
						}
								//this adjusts the robot until it moves to a position where the leftside sensor is detecting the beacon
            	motor[motor2] = (-1 * Motor_Speed);
            	motor[motor1] = Motor_Speed;


break;





case CORRECTING:
							
							
							while(time1(T2) < adjustment_time*0.6){
							//this moves to the centre of the locations where the left and right IRs started to detect the beacon, ideally centring.
							motor[motor1] = (-1 * Motor_Speed);
            	motor[motor2] = Motor_Speed;
						}
								
							exercise3_state = CORRECT_LOCATION;
							break;
							
/*case ADVANCING:
//this needs work and was not needed for milestone 3.
//
			while(monitorlightleft() +100 < monitorlightright()) 
			{
 				motor[motor1] = MOTOR_SPEED-10;
 				motor[motor2] = -1*(MOTOR_SPEED-10);
 				if (SensorValue[sonar] <= 10){
				exercise3_state = CORRECT_LOCATION;
			}
			if (monitorlightright()<= 50){
			exercise3_state = CORRECT_LOCATION;
		}
			}
			while(monitorlightright() > monitorlightright() + 100)
			{		
				motor[motor1] = -40;
 				motor[motor2] = 40;
 				if (SensorValue[sonar] <= 10){
				exercise3_state = CORRECT_LOCATION;
			}
			if (monitorlightright()<= 50){
			exercise3_state = CORRECT_LOCATION;
		}
			}
			while(abs(monitorlightleft() - monitorlightright()) <= 100)
				{
				motor[motor1] = -Motor_Speed;
				motor[motor2] = -Motor_Speed;
				if (SensorValue[sonar] <= 10){
				exercise3_state = CORRECT_LOCATION;
			}
			if (monitorlightright()<= 50){
			exercise3_state = CORRECT_LOCATION;
		}
			}	
		//  END OF ADVANCEMENT, either hit a wall or hit the beacon
			break;
*/



case CORRECT_LOCATION:

SensorValue(LED)= ON; // turn on the LED to signal task success

				motor[motor1] = OFF;
				motor[motor2] = OFF;

break;

  	}//switch
	}//while
}//exercise 3





void exercise_4()
{
	// Define tag for enumerated type for exercise 4
	enum T_exercise4_state {
    	MOTOR_STOP = 0,
    	GOING_FORWARD,
	};

	// Declare variable to hold state, intialize to MOTOR_STOP state.
	T_exercise4_state exercise4_state = MOTOR_STOP;



	while(true)
	{
    	// Switch the states.
    	switch(exercise4_state) {

        	// Code for MOTOR_STOP state:
case MOTOR_STOP:
monitorInput();
    	// Turn motors off.
        	motor[motor1] = OFF;
        	motor[motor2] = OFF;
        	SensorValue(LED)= OFF;
        	if ( button1_pushed ) {
            	// If button1 pushed, change to the MOTOR_RUNNING state.
            	exercise4_state = GOING_FORWARD;
            	// Clear flag to indicate button 1 processed.
            	button1_pushed = false;
        	}//if
   			 break;

case GOING_FORWARD:
        	// Turn LED on.
    	SensorValue[LED] = ON;
    	if(SensorValue[sonar] <= CONNECTION_DISTANCE){
   		 //if any of the conditions fail (with some IR buffer room), turn off the LED, as the robot is either too close or not facing the beacon.
   		 exercise4_state = MOTOR_STOP;
  	}

        	break;

    	default:
    	}//

	}//end while
}//exercise 4







task main()
{
	button1_pushed = button2_pushed = false;

	switch (EXERCISE_NUMBER)
	{
	case 1:
    	exercise_1();//individual exercise purposes explained above.
    	break;
	case 2:
    	exercise_2(); //
    	break;
	case 3:
    	exercise_3(); //
    	break;
    case 4:
    	exercise_4(); //
    	break;
	default: //should never get here.
	} // end switch

}// end main

